{"version":3,"sources":["firebase/firebase.js","redux/user/user.actions.js","redux/user/user.operations.js","redux/user/user.selector.js","pages/Home/Home.page.jsx","redux/comment/comment.actions.js","redux/comment/comment.selector.js","components/CommentListItem/CommentListItem.component.jsx","components/CommentList/CommentList.component.jsx","redux/comment/comment.operations.js","components/IconLabelButton/IconLabelButton.component.jsx","components/InputArea/InputArea.component.jsx","pages/Chat/Chat.page.jsx","components/FormInput/FormInput.component.jsx","components/LoginInputArea/LoginInputArea.component.jsx","pages/Login/Login.page.jsx","components/SignupInputArea/SignupInputArea.component.jsx","pages/Signup/Signup.page.jsx","components/ButtonAppBar/ButtonAppBar.component.jsx","components/Footer/Footer.component.jsx","App.js","serviceWorker.js","redux/comment/comment.reducer.js","redux/user/user.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","userActionTypes","userLoginSignup","user","type","payload","createUserProfileDocument","userAuth","userName","a","userRef","doc","uid","get","exists","email","createdAt","Date","set","console","log","message","createNewAccountWithEmail","password","dispath","getState","createUserWithEmailAndPassword","loginWithGoogleAccount","signInWithPopup","displayName","snapShot","getUserInfo","createSelector","state","userInfo","Home","props","useState","setUserName","userIsLogin","setUserIsLogin","useSelector","useEffect","unsubscribe","onAuthStateChanged","className","Fragment","onClick","history","push","commentActionTypes","commentListSetUp","comments","addNewComment","comment","getCommentList","commentList","CommentListItem","commentNo","date","time","CommentList","topic","classNameForBackgroundImage","dispatch","useDispatch","collectionId","collectionRef","collection","orderBy","then","snapshot","forEach","data","onSnapshot","docChanges","change","commentsUpdate","obj","document","querySelector","scrollTop","scrollHeight","map","key","useStyles","makeStyles","theme","button","margin","spacing","IconLabelButton","classes","Button","variant","color","style","background","endIcon","icon","Icon","click","text","InputArea","newCommentNo","length","setMessage","setCommentNo","placeholder","onChange","event","target","value","required","preventDefault","sendMessage","sendUserName","getMonth","getDate","getFullYear","hours","getHours","mins","getMinutes","add","Chat","match","params","FormInput","handleChange","label","otherProps","Login","userCredentials","setCredentials","useHistory","handleSubmit","alert","signInWithEmailAndPassword","authId","id","isLogin","name","loginWithGoogleAccountBackToHome","setTimeout","faHandPointLeft","Signup","confirmPass","root","flexGrow","position","width","zIndex","menuButton","marginRight","title","fontFamily","fontWeight","fontSize","ButtonAppBar","headerText","setheaderText","listen","location","pathname","slice","lastIndexOf","AppBar","Toolbar","IconButton","edge","aria-label","cursor","Typography","signOut","Footer","href","faLinkedin","faGithub","faMailBulk","App","unsubscribeFromAuth","exact","path","component","Boolean","window","hostname","INITIAL_STATE","commentReducer","action","userReducer","rootReducer","combineReducers","middlewares","thunk","store","createStore","applyMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.edeb750e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\n\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\napiKey: \"AIzaSyCIWtOYcNVbkFSc5zeTl1OD5ipu2NPmwiM\",\nauthDomain: \"chat-app-8976e.firebaseapp.com\",\ndatabaseURL: \"https://chat-app-8976e.firebaseio.com\",\nprojectId: \"chat-app-8976e\",\nstorageBucket: \"chat-app-8976e.appspot.com\",\nmessagingSenderId: \"622522794289\",\nappId: \"1:622522794289:web:a089a4b8f033367ac67010\",\nmeasurementId: \"G-Y5ZTFZ215Q\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);","export const userActionTypes = {\n  USER_LOGIN_SIGNUP: \"USER_LOGIN_SIGNUP\",\n  USER_LOGOUT: \"USER_LOGOUT\",\n  USER_INITIALIZE: \"USER_INITIALIZE\",\n};\n\nexport const userInitialize = () => ({\n  type: userActionTypes.USER_INITIALIZE,\n});\n\nexport const userLoginSignup = (user) => ({\n  type: userActionTypes.USER_LOGIN_SIGNUP,\n  payload: user\n});\n\nexport const userLogout = () => ({\n  type: userActionTypes.USER_LOGIN_SIGNUP,\n});","import { userLoginSignup, userLogout } from './user.actions';\nimport { signInWithGoogle } from '../../firebase/firebase';\n\nimport { firestore, auth } from \"../../firebase/firebase\";\n\nexport const createUserProfileDocument = async (userAuth, userName) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        email,\n        createdAt,\n        userName,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const createNewAccountWithEmail = (userName, email, password) => {\n    return async (dispath, getState) => {\n        try {\n\n          const { user } = await auth.createUserWithEmailAndPassword(\n            email,\n            password\n          );\n\n          await createUserProfileDocument(user, userName);\n\n        //   const userInfo = {\n        //     userName: userName,\n        //     authId: user.uid,\n        //     isLogin: true,\n        //   };\n\n        //   dispath(userLoginSignup(userInfo));\n        } catch(error) {\n            console.log(error)\n        }\n    }\n};\n\nexport const loginWithGoogleAccount = () => {\n    return async (dispath, getState) => {\n        try {\n\n          const { user } = await signInWithGoogle();\n\n          const { uid, displayName, email } = user;\n\n        //   await createUserProfileDocument(user, userName);\n\n        //   console.log(uid, displayName, email);\n\n          if (!user) return;\n\n          const userRef = firestore.doc(`users/${uid}`);\n\n          const snapShot = await userRef.get();\n\n          if (!snapShot.exists) {\n            const createdAt = new Date();\n            const userName = displayName;\n\n            await userRef.set({\n            email,\n            createdAt,\n            userName,\n            });\n          }\n\n          return snapShot;\n\n        } catch(error) {\n            console.log(error)\n        }\n    }\n};\n","import { createSelector } from \"reselect\";\n\nconst userSelector = (state) => state.user;\n\nexport const getUserInfo = createSelector(\n  [userSelector],\n  (state) => state.userInfo\n);\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUserInfo } from '../../redux/user/user.selector.js';\n\nimport { auth } from '../../firebase/firebase'\n\nimport './Home.styles.scss';\n\nconst Home = (props) => {\n  const [userName, setUserName] = useState(\"\");\n  const [userIsLogin, setUserIsLogin] = useState(false);\n  const state = useSelector(state => state);\n  const userInfo = getUserInfo(state);\n\n\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged(function (userAuth) {\n      if (userAuth) {\n        setUserName(userInfo.userName);\n        setUserIsLogin(true);\n        // console.log(userInfo);\n      } else {\n        setUserName(userInfo.userName);\n        setUserIsLogin(false);\n        // console.log(userInfo);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    }\n  })\n\n    return (\n      <div className=\"homePageDiv\">\n        <div className=\"homePageBody\">\n          { !userIsLogin ? (\n            <React.Fragment>\n              <h2>Choose the Topic</h2>\n              <p>You want to talk about</p>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <p className=\"hiName\">Hi, {userName} !</p>\n              <h2>Choose the Topic</h2>\n              <p>You want to talk about</p>\n            </React.Fragment>\n          )}\n          <ul>\n            <li\n              onClick={() =>\n                props.history.push(\"/redux-exercise/chat/greeting\")\n              }\n              className=\"topicGreeting\"\n            >\n              <span>Greeting</span>\n            </li>\n            <li\n              onClick={() => props.history.push(\"/redux-exercise/chat/food\")}\n              className=\"topicFood\"\n            >\n              <span>Food</span>\n            </li>\n            <li\n              onClick={() => props.history.push(\"/redux-exercise/chat/movie\")}\n              className=\"topicMovie\"\n            >\n              <span>Movie</span>\n            </li>\n            <li\n              onClick={() =>\n                props.history.push(\"/redux-exercise/chat/programming\")\n              }\n              className=\"topicProgramming\"\n            >\n              <span>Programming</span>\n            </li>\n            <li\n              onClick={() => props.history.push(\"/redux-exercise/chat/outdoor\")}\n              className=\"topicOutdoor\"\n            >\n              <span>Outdoor Activity</span>\n            </li>\n            <li\n              onClick={() =>\n                props.history.push(\"/redux-exercise/chat/traveling\")\n              }\n              className=\"topicTraveling\"\n            >\n              <span>Traveling</span>\n            </li>\n            <li\n              onClick={() => props.history.push(\"/redux-exercise/chat/school\")}\n              className=\"topicSchool\"\n            >\n              <span>School</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n}\n\nexport default Home;","export const commentActionTypes = {\n  COMMENTLIST_SETUP: \"COMMENTLIST_SETUP\",\n  ADD_NEWCOMMENT: \"ADD_NEWCOMMENT\",\n};\n\nexport const commentListSetUp = (comments) => ({\n  type: commentActionTypes.COMMENTLIST_SETUP,\n  payload: comments\n});\n\nexport const addNewComment = (comment) => ({\n  type: commentActionTypes.ADD_NEWCOMMENT,\n  payload: comment\n});","import { createSelector } from 'reselect';\n\nconst commentsSelector = (state) => state.comments;\n\nexport const getCommentList = createSelector(\n    [commentsSelector],\n    state => state.commentList\n)","import React from 'react';\n\nconst CommentListItem = (props) => {\n    const comment = props.comment;\n\n    return (\n      <li>\n        <p className=\"commentData\">\n          <span className=\"commentNo\">No.{comment.commentNo}</span>\n          <span className=\"commentName\">{comment.userName}</span>\n          <span className=\"commentDate\">{comment.date}</span>\n          <span className=\"commentTime\">{comment.time}</span>\n        </p>\n        <div className=\"commentMessage\">\n          <p>{comment.message}</p>\n        </div>\n      </li>\n    );\n}\n\nexport default CommentListItem;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { commentsInitiate, commentsUpdate } from '../../redux/comment/comment.operations.js';\nimport { getCommentList } from '../../redux/comment/comment.selector.js';\n\nimport CommentListItem from '../CommentListItem/CommentListItem.component';\n\nimport './CommentList.styles.scss';\n\nconst CommentList = (props) => {\n    const topic = props.topic;\n\n    const classNameForBackgroundImage = topic + \"BackGround\";\n\n    const dispatch = useDispatch();\n    const state = useSelector((state) => state);\n    let commentList = getCommentList(state);\n\n    useEffect(() => {\n      dispatch(commentsInitiate(\"chat-\" + topic));\n      dispatch(commentsUpdate(\"chat-\" + topic));\n\n      // console.log(topic)\n      // dispatch(commentsInitiate(\"chat-greeting\"));\n    //   console.log(commentList);\n    },[]);\n\n    useEffect(()=>{\n        const obj = document.querySelector(\".commentListWrapper\");\n        obj.scrollTop = obj.scrollHeight;\n        console.log(commentList);\n    }, [commentList])\n\n    return (\n      <div className={\"commentListWrapper\" + \" \" + classNameForBackgroundImage}>\n        <ul className=\"commentList\">{\n            commentList.map(comment => \n                <CommentListItem key={comment.commentNo} comment={comment} />\n            )\n        }</ul>\n      </div>\n    );\n}\n\nexport default CommentList;","import { commentListSetUp, addNewComment } from './comment.actions';\n\nimport { firestore } from '../../firebase/firebase'\n\nexport const commentsUpdate = (collectionId) => {\n    return async (dispatch, getState) => {\n      const collectionRef = firestore.collection(collectionId);\n      // let comments = [];\n\n      await collectionRef\n        .orderBy(\"commentNo\")\n        .onSnapshot(snapshot => {\n          // let comments = [];\n          // let changes = snapshot;\n          let changes = snapshot.docChanges();\n          changes.forEach((change) => {\n            if(change.type == \"added\") {\n              const comment = change.doc.data();\n              dispatch(addNewComment(comment));\n            } else if (change.type == 'remove') {\n              // delete comment action\n            } else {\n              // const comment = change.doc.data();\n              // console.log(comment);\n              // comments.push(comment);\n            }\n          });\n          // console.log(comments);\n          // dispatch(commentListSetUp(comments));\n        });\n    }\n}\n// export const commentsInitiate = (collectionId) => {\n//     return async (dispatch, getState) => {\n//       const collectionRef = firestore.collection(collectionId);\n//       // let comments = [];\n\n//       await collectionRef\n//         .orderBy(\"commentNo\")\n//         .onSnapshot(snapshot => {\n//           let comments = [];\n//           // let changes = snapshot;\n//           let changes = snapshot.docChanges();\n//           changes.forEach((change) => {\n//             const comment = change.doc.data();\n//             console.log(comment);\n//             comments.push(comment);\n//           });\n//           console.log(comments);\n//           dispatch(commentListSetUp(comments));\n//         });\n//     }\n// }\nexport const commentsInitiate = (collectionId) => {\n    return async (dispatch, getState) => {\n      const collectionRef = firestore.collection(collectionId);\n      let comments = [];\n\n      await collectionRef\n        .orderBy(\"commentNo\")\n        .get()\n        .then((snapshot) => {\n          snapshot.forEach((doc) => {\n            const comment = doc.data();\n            //   console.log(comment);\n            comments.push(comment);\n          });\n        });\n\n    //   console.log(comments);\n      dispatch(commentListSetUp(comments));\n    }\n}\n\nexport const addCommentToDatabase = (collectionId, comment) => {\n    return async (dispatch, getState) => {\n      const collectionRef = firestore.collection(collectionId);\n\n      await collectionRef.add(comment)\n\n      dispatch(addNewComment(comment));\n    }\n}\n\n// export const commentUpdate = (collectionId) => {\n//       return async (dispatch, getState) => {\n//         const collectionRef = firestore.collection(collectionId);\n//         // let comments = [];\n\n//         await collectionRef.onUpdate()\n//           .orderBy(\"commentNo\")\n//           .onSnapshot((snapshot) => {\n//             let comments = [];\n//             // let changes = snapshot;\n//             let changes = snapshot.docChanges();\n//             changes.forEach((change) => {\n//               const comment = change.doc.data();\n//               console.log(\"update-1\");\n//               comments.push(comment);\n//             });\n//             console.log(\"update-2\");\n//             dispatch(commentListSetUp(comments));\n//           });\n//       };\n\n// }","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Icon from \"@material-ui/core/Icon\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function IconLabelButton(props) {\n  const classes = useStyles();\n\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      style={{ background: \"#100c08\" }}\n      className={classes.button}\n      endIcon={props.icon !== null ? <Icon>{props.icon}</Icon> : null}\n      onClick={props.click}\n    >\n      {props.text}\n    </Button>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport IconLabelButtons from \"../IconLabelButton/IconLabelButton.component\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCommentToDatabase } from '../../redux/comment/comment.operations.js';\n\nimport './inputArea.styles.scss';\n\nconst InputArea = (props) => {\n    const dispatch = useDispatch();\n    const comments = useSelector(state => state.comments);\n    let newCommentNo = comments.commentList.length + 1;\n\n    const topic = props.topic;\n    \n    if (newCommentNo < 10) {\n      newCommentNo = \"000\" + newCommentNo;\n    } else if (newCommentNo < 100) {\n      newCommentNo = \"00\" + newCommentNo;\n    } else if (newCommentNo < 1000) {\n      newCommentNo = \"0\" + newCommentNo;\n    } \n    \n    const [userName, setUserName] = useState(\"No Name\");\n    const [message, setMessage] = useState(\"\");\n    const [commentNo, setCommentNo] = useState(newCommentNo);\n\n    const nameChangeHandler = (event) => {\n        setUserName(event.target.value)\n    }\n    const messageChangeHandler = (event) => {\n        setMessage(event.target.value)\n    }\n    const submitComment = (event) => {\n      event.preventDefault();\n\n      // if (message === \"\") {\n      //     alert(\"Message Area is required!!!\")\n      //     return;\n      // }\n\n      let sendMessage = message;\n      let sendUserName = userName;\n\n      if (sendMessage === \"\") {\n        sendMessage = \"No Message\";\n      }\n      if (sendUserName === \"\") {\n        sendUserName = \"No Name\";\n      }\n\n      const month = new Date().getMonth() + 1;\n      const day = new Date().getDate();\n      const year = new Date().getFullYear();\n\n      const date = month + \"/\" + day + \"/\" + year;\n\n      const hours = new Date().getHours();\n      const mins = new Date().getMinutes() < 10\n              ? \"0\" + new Date().getMinutes()\n              : new Date().getMinutes()\n      \n      const time = hours + \":\" + mins\n\n      dispatch(\n        addCommentToDatabase(\n            \"chat-\" + topic,\n            {\n            commentNo: commentNo,\n            date: date,\n            time: time,\n            userName: sendUserName,\n            message: sendMessage,\n            }\n        )\n      );\n      // setUserName(\"No Name\");\n      setMessage(\"\");\n    };\n\n    useEffect(()=>{\n        setCommentNo(newCommentNo);\n    },[comments])\n\n    return (\n      <div className=\"inputAreaDiv\">\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Your Name\"\n            // value={userName}\n            onChange={nameChangeHandler}\n          />\n          <textarea\n            placeholder=\"Write message\"\n            onChange={messageChangeHandler}\n            value={message}\n            required\n          />\n          <IconLabelButtons text=\"send\" icon=\"send\" type=\"submit\" click={submitComment} />\n        </form>\n      </div>\n    );\n}\n\nexport default InputArea;\n\n          // <button type=\"submit\" onClick={submitComment}>\n          //   SUBMIT\n          // </button>;\n","import React from \"react\";\n\nimport \"./Chat.styles.scss\";\n\nimport CommentList from \"../../components/CommentList/CommentList.component.jsx\";\nimport InputArea from \"../../components/InputArea/InputArea.component.jsx\";\n\nconst Chat = (props) => {\n    const topic = props.match.params.topic;\n    // console.log(topic);\n    \n    return (\n      <div className=\"Chat\">\n        <div className=\"pageStyle\">\n          <CommentList topic={topic} />\n          <InputArea topic={topic} />\n        </div>\n      </div>\n    );\n}\n\nexport default Chat;\n","import React from \"react\";\n\nimport \"./FormInput.styles.scss\";\n\nconst FormInput = ({ handleChange, label, ...otherProps }) => (\n  <div className=\"group\">\n    <input className=\"form-input\" onChange={handleChange} {...otherProps} />\n    {label ? (\n      <label\n        className={`${\n          otherProps.value.length ? \"shrink\" : \"\"\n        } form-input-label`}\n      >\n        {label}\n      </label>\n    ) : null}\n  </div>\n);\n\nexport default FormInput;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport FormInput from \"../FormInput/FormInput.component\";\nimport IconLabelButton from '../IconLabelButton/IconLabelButton.component';\n\nimport { auth } from \"../../firebase/firebase\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { createUserProfileDocument } from \"../../redux/user/user.operations\";\nimport { userLoginSignup } from \"../../redux/user/user.actions\";\n\n\n\nimport \"./LoginInputArea.styles.scss\";\n\nconst Login = () => {\n  const [userCredentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const { email, password } = userCredentials;\n\n  // useEffect(() => {\n  //   const unsubscribe = auth.onAuthStateChanged(function (userAuth) {\n  //     if (userAuth) {\n  //       history.push(\"/redux-exercise/\");\n  //     }\n  //   });\n  //   return () => unsubscribe();\n  // });\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if ( !email || !password ) {\n        alert(\"Please fill in all fields\");\n        return;\n    }\n\n    try {\n      await auth.signInWithEmailAndPassword(email, password);\n      setCredentials({\n        email: \"\",\n        password: \"\",\n      });\n\n      await auth.onAuthStateChanged(async (userAuth) => {\n        if (userAuth) {\n          const userRef = await createUserProfileDocument(userAuth);\n          \n          userRef.onSnapshot((snapShot) => {\n            dispatch(\n              userLoginSignup(\n                {\n                  userName: snapShot.data().userName,\n                  authId: snapShot.id,\n                  isLogin: true\n                }\n              )\n            )\n          });\n        }});\n\n        history.push(\"/redux-exercise/\");\n\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n\n    setCredentials({ ...userCredentials, [name]: value });\n  };\n\n  return (\n    <div className=\"loginInputArea\">\n      <form>\n        <FormInput\n          name=\"email\"\n          type=\"email\"\n          value={email}\n          handleChange={handleChange}\n          label=\"Email\"\n          required\n        />\n        <FormInput\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          handleChange={handleChange}\n          label=\"Password\"\n          required\n        />\n\n        <div className=\"buttons\">\n          <IconLabelButton click={handleSubmit} text=\"Login\" icon={null} />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport LoginInputArea from '../../components/LoginInputArea/LoginInputArea.component';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandPointLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { loginWithGoogleAccount } from '../../redux/user/user.operations.js';\n\nimport { useHistory } from 'react-router-dom';\n\nimport \"./Login.styles.scss\";\n\nconst Login = () => {\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // useEffect(()=>{\n    //   const unsubscribe = auth.onAuthStateChanged(function (userAuth) {\n    //     if (userAuth) {\n    //       history.push(\"/redux-exercise/\");\n    //     } \n    //   });\n    //   return () => unsubscribe();\n    // })\n\n    const loginWithGoogleAccountBackToHome = async() => {\n        const result = await dispatch(loginWithGoogleAccount());\n        if (result) {\n          setTimeout(() => {\n            history.push(\"/redux-exercise/\");\n          }, 500);\n        } else {\n            return;\n        }\n    }\n\n    return (\n      <div className=\"loginPageDiv\">\n        <div className=\"loginPageBody\">\n          <h2>Login</h2>\n          <p>\n            Login with your Email Address or\n            <br />\n            <span\n              className=\"googleAccount\"\n              // onClick={dispatch(loginWithGoogleAccount)}\n              onClick={loginWithGoogleAccountBackToHome}\n            >\n              Google Account\n            </span>\n            &nbsp;\n            <FontAwesomeIcon icon={faHandPointLeft} />\n          </p>\n          <p>\n            If you don't have your account yet,\n            <br />\n            <span\n              className=\"pleaseSignup\"\n              onClick={() => history.push(\"/redux-exercise/signup\")}\n            >\n              please Signup\n            </span>\n            &nbsp;\n            <FontAwesomeIcon icon={faHandPointLeft} />\n          </p>\n          <LoginInputArea />\n        </div>\n      </div>\n    );\n}\n\nexport default Login;","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\"\n\nimport FormInput from \"../FormInput/FormInput.component\";\nimport IconLabelButton from '../IconLabelButton/IconLabelButton.component';\n\nimport { createNewAccountWithEmail } from '../../redux/user/user.operations';\n\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./SigninInputArea.styles.scss\";\n\nconst Signup = () => {\n  const [userCredentials, setCredentials] = useState({\n    userName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPass: \"\"\n  });\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { userName, email, password, confirmPass } = userCredentials;\n\n  // useEffect(() => {\n  //   const unsubscribe = auth.onAuthStateChanged(function (userAuth) {\n  //     if (userAuth) {\n  //       history.push(\"/redux-exercise/\");\n  //     }\n  //   });\n  //   return () => unsubscribe();\n  // });\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!userName || !email || !password || !confirmPass) {\n      alert(\"Please fill in all fields\");\n      return;\n    }\n\n    if ( password.length < 6 ) {\n      alert(\"Password should be 6 or more characters\");\n      return;\n    }\n\n    if (password !== confirmPass) {\n      alert(\"Passwords don't match\");\n      return;\n    }\n\n    try {\n      await dispatch(createNewAccountWithEmail(userName, email, password));\n      setCredentials({\n        userName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPass: \"\",\n      });\n\n      history.push(\"/redux-exercise/\");\n\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n\n    setCredentials({ ...userCredentials, [name]: value });\n  };\n\n  useEffect(()=> {\n    console.log(userCredentials);\n  })\n\n  return (\n    <div className=\"loginInputArea\">\n      <form>\n        <FormInput\n          name=\"userName\"\n          type=\"text\"\n          value={userName}\n          handleChange={handleChange}\n          label=\"Name\"\n          required\n        />\n        <FormInput\n          name=\"email\"\n          type=\"email\"\n          value={email}\n          handleChange={handleChange}\n          label=\"Email\"\n          required\n        />\n        <FormInput\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          handleChange={handleChange}\n          label=\"Password\"\n          required\n        />\n        <FormInput\n          name=\"confirmPass\"\n          type=\"password\"\n          value={confirmPass}\n          handleChange={handleChange}\n          label=\"Confirm Password\"\n          required\n        />\n\n        <div className=\"buttons\">\n          <IconLabelButton\n            text=\"Signup\"\n            icon={null}\n            click={handleSubmit}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport SignupInputArea from '../../components/SignupInputArea/SignupInputArea.component';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandPointLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { loginWithGoogleAccount } from \"../../redux/user/user.operations.js\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./Signup.styles.scss\";\n\nconst Signup = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // useEffect(() => {\n    //   const unsubscribe = auth.onAuthStateChanged(function (userAuth) {\n    //     if (userAuth) {\n    //       setTimeout(() => {\n    //         history.push(\"/redux-exercise/\");\n    //       }, 1000);\n    //     }\n    //   });\n    //   return () => unsubscribe();\n    // });\n\n    const loginWithGoogleAccountBackToHome = async () => {\n      const result = await dispatch(loginWithGoogleAccount());\n      if (result) {\n          setTimeout(() => {\n            history.push(\"/redux-exercise/\");\n          }, 500);\n      } else {\n        return;\n      }\n    };\n\n    return (\n      <div className=\"signupPageDiv\">\n        <div className=\"signupPageBody\">\n          <h2>Signup</h2>\n          <p>\n            Signup with your Email Address or\n            <br />\n            <span\n              className=\"googleAccount\"\n              onClick={loginWithGoogleAccountBackToHome}\n            >\n              Google Account\n            </span>\n            &nbsp;\n            <FontAwesomeIcon icon={faHandPointLeft} />\n          </p>\n          <SignupInputArea />\n        </div>\n      </div>\n    );\n}\n\nexport default Signup;","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport { useHistory } from 'react-router-dom';\n\nimport { auth } from '../../firebase/firebase.js';\nimport { userLogout } from '../../redux/user/user.actions.js';\n\nimport './ButtonAppBar.styles.scss'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"fixed\",\n    width: \"100%\",\n    zIndex: 100\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    fontFamily: \"'Dancing Script', cursive\",\n    fontWeight: 600,\n    fontSize: \"2rem\"\n  },\n}));\n\nexport default function ButtonAppBar() {\n    const [headerText, setheaderText] = useState(\"Chat Place\");\n    const [userIsLogin, setUserIsLogin] = useState(false);\n    // const state = useSelector(state => state);\n    // const user = state.user.userInfo;\n\n    const classes = useStyles();\n\n    auth.onAuthStateChanged(function (userAuth) {\n      if (userAuth) {\n        setUserIsLogin(true);\n        // console.log(user);\n      } else {\n        setUserIsLogin(false);\n      }\n    });\n\n    const history = useHistory();\n\n    useEffect(() => {\n      return history.listen((location) => {\n        let topic = location.pathname;\n\n        if (\n          topic === \"/redux-exercise\" ||\n          topic === \"/redux-exercise/\" ||\n          topic === \"/\" ||\n          topic === \"\"\n        ) {\n          topic = \"Chat Place\";\n        } else {\n          topic = topic.slice(topic.lastIndexOf(\"/\") + 1);\n        }\n        // console.log(topic);\n        setheaderText(topic);\n      });\n    });\n\n    // useEffect(()=>{\n    //   auth.onAuthStateChanged(function (user) {\n    //     if (user) {\n    //       userIsLogin = true;\n    //     } else {\n    //       userIsLogin = false;\n    //     }\n    //   });\n    // })\n    \n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ background: \"#100c08\" }}>\n        <Toolbar>\n          {headerText !== \"Chat Place\" ? (\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n              onClick={() => history.push(\"/redux-exercise/\")}\n            >\n              <MenuIcon />\n            </IconButton>\n          ) : (\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              style={{\n                color: \"#100c08\",\n                cursor: \"inherit\",\n              }}\n              aria-label=\"menu\"\n            >\n              <MenuIcon />\n            </IconButton>\n          )}\n          <Typography variant=\"h6\" className={classes.title}>\n            {headerText}\n          </Typography>\n          { userIsLogin ? (\n            <Button\n              color=\"inherit\"\n              onClick={\n                () => {\n                  auth.signOut();\n                  userLogout();\n                }\n              }\n            >\n              Logout\n            </Button>\n          ) : (\n            <Button\n              color=\"inherit\"\n              onClick={() => history.push(\"/redux-exercise/login\")}\n            >\n              Login\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLinkedin, faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faMailBulk } from \"@fortawesome/free-solid-svg-icons\";\n\nimport './Footer.style.scss';\n\nconst Footer = () => {\n    return (\n      <footer className=\"pageFooter\">\n        <div className=\"nameAndCopyDiv\">\n          <p className=\"footerCopyright\">\n            &copy; 2020 Tomohiro Yoshida. All Rights Reserved\n          </p>\n        </div>\n\n        <ul className=\"contactList\">\n          <li className=\"linkedinItem\">\n            <a href=\"https://www.linkedin.com/in/tomohiro-yoshida-a8320816a/\">\n              <FontAwesomeIcon icon={faLinkedin} />\n            </a>\n          </li>\n          <li className=\"githubItem\">\n            <a href=\"https://github.com/TOMO-YOSHI\">\n              <FontAwesomeIcon icon={faGithub} />\n            </a>\n          </li>\n          <li className=\"mailItem\">\n            <a href=\"mailto: tyoshida01@mylangara.ca\">\n              <FontAwesomeIcon icon={faMailBulk} />\n            </a>\n          </li>\n        </ul>\n      </footer>\n    );\n}\n\nexport default Footer;\n\n        //   <p className=\"authorName\">Author: Tomohiro Yoshida</p>\n        //   <p className=\"footerCopyright\">\n        //     &copy; 2020 Chat Place. All Rights Reserved\n        //   </p>\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport { Route, Switch } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'\nimport { auth } from './firebase/firebase';\nimport { createUserProfileDocument } from './redux/user/user.operations';\nimport { userLoginSignup, userInitialize } from './redux/user/user.actions';\n\nimport Home from './pages/Home/Home.page.jsx';\nimport Chat from './pages/Chat/Chat.page.jsx';\nimport Login from './pages/Login/Login.page.jsx';\nimport Signup from './pages/Signup/Signup.page.jsx';\n\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar.component.jsx';\nimport Footer from './components/Footer/Footer.component.jsx'\n\nfunction App() {\n    const dispatch = useDispatch();\n    const state = useSelector(state => state);\n\n    useEffect(() => {\n      const unsubscribeFromAuth = \n      // auth.onAuthStateChanged();\n      auth.onAuthStateChanged(async (userAuth) => {\n        if (userAuth) {\n          const userRef = await createUserProfileDocument(userAuth);\n          \n          // userRef.onSnapshot((snapShot) => {\n          //   dispatch(\n          //     userLoginSignup(\n          //       {\n          //         userName: snapShot.userName,\n          //         authId: snapShot.id,\n          //         isLogin: true\n          //       }\n          //     )\n          //   )\n          // });\n\n          setTimeout(() => {\n            userRef.get().then(async (snapshot) => {\n              console.log(snapshot.data());\n              // console.log(userRef);\n              const userName = await snapshot.data().userName;\n              dispatch(\n                userLoginSignup({\n                  userName: userName,\n                  authId: userRef.id,\n                  isLogin: true,\n                })\n              );\n            });\n          }, 500);\n\n        } else {\n          dispatch(userInitialize());\n        }\n      });\n      return () => {\n        unsubscribeFromAuth();\n      };\n    }, [userLoginSignup]);\n\n    useEffect(()=>{\n      console.log(state.user.userInfo);\n    })\n\n  return (\n    <div className=\"App\">\n      <ButtonAppBar />\n      <Switch>\n        <Route exact path=\"/redux-exercise\" component={Home} />\n        <Route path=\"/redux-exercise/chat/:topic\" component={Chat} />\n        <Route path=\"/redux-exercise/login\" component={Login} />\n        <Route path=\"/redux-exercise/signup\" component={Signup} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n      // <ButtonAppBar />\n      // <div className=\"pageStyle\">\n      //   <CommentList />\n      //   <InputArea />\n      // </div>\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { commentActionTypes } from \"./comment.actions\";\n\nconst INITIAL_STATE = {\n  commentList: [\n    // {\n      // commentNo: \"0000\",\n      // userName: \"TOMO\",\n      // date: \"09/22/2020\",\n      // time: \"00:00\",\n      // message: [\n        // `Welcome to \"Chatting Place\"!!`,\n        // `Hi, I'm Tomo, I developed this chat app!!`,\n      // ],\n    // },\n    // {\n    //   commentNo: \"0001\",\n    //   userName: \"TOMO\",\n    //   dateAndTime: new Date(),\n    //   message: [\n    //     `Welcome to \"Chatting Place\"!!`,\n    //     `Hi, I'm Tomo, I developed this chat app!!`,\n    //   ],\n    // },\n    // {\n    //   commentNo: \"0002\",\n    //   userName: \"TOMO\",\n    //   dateAndTime: new Date(),\n    //   message: [\n    //     `Please leave your first comment!!`,\n    //   ],\n    // },\n  ],\n};\n\nconst commentReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case commentActionTypes.COMMENTLIST_SETUP:\n        return {\n          ...state,\n          commentList: action.payload,\n        };\n      case commentActionTypes.ADD_NEWCOMMENT:\n        return {\n          ...state,\n          commentList: [...state.commentList, action.payload],\n        };\n      default:\n        return state;\n    }\n}\n\nexport default commentReducer;","import { userActionTypes } from './user.actions';\n\nconst INITIAL_STATE ={\n    userInfo:\n    {\n    userName: \"No Name\",\n    authId: null,\n    isLogin: false\n    }\n}\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case userActionTypes.USER_LOGIN_SIGNUP:\n            return {\n                ...state,\n                userInfo: action.payload\n            };\n        case userActionTypes.USER_LOGOUT:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}\n\nexport default userReducer;\n\n\n","import { combineReducers } from 'redux';\n\nimport commentReducer from './comment/comment.reducer';\nimport userReducer from './user/user.reducer';\n\n\nexport const rootReducer = combineReducers({\n    comments: commentReducer,\n    user: userReducer\n});\n\n// export default rootReducer;","import { createStore, applyMiddleware } from 'redux';\n\nimport { rootReducer } from './root-reducer';\n\n// import logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [thunk];\n\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}