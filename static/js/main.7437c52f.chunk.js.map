{"version":3,"sources":["pages/Home/Home.page.jsx","redux/comment/comment.actions.js","firebase/firebase.js","redux/comment/comment.selector.js","components/CommentListItem/CommentListItem.component.jsx","components/CommentList/CommentList.component.jsx","redux/comment/comment.operations.js","components/InputArea/InputArea.component.jsx","pages/Chat/Chat.page.jsx","components/ButtonAppBar/ButtonAppBar.component.jsx","App.js","serviceWorker.js","redux/comment/comment.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Home","props","className","onClick","history","push","to","commentActionTypes","commentListSetUp","comments","type","payload","addNewComment","comment","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","getCommentList","createSelector","state","commentList","CommentListItem","commentNo","userName","date","time","message","CommentList","topic","dispatch","useDispatch","useSelector","useEffect","collectionId","getState","a","collectionRef","collection","orderBy","get","then","snapshot","forEach","doc","data","obj","document","querySelector","scrollTop","scrollHeight","console","log","map","key","InputArea","newCommentNo","length","useState","setUserName","setMessage","setCommentNo","placeholder","onChange","event","target","value","required","preventDefault","sendMessage","sendUserName","Date","getMonth","getDate","getFullYear","hours","getHours","mins","getMinutes","add","Chat","match","params","useStyles","makeStyles","theme","root","flexGrow","position","width","menuButton","marginRight","spacing","title","ButtonAppBar","headerText","setheaderText","classes","useHistory","listen","location","pathname","slice","lastIndexOf","AppBar","style","background","Toolbar","IconButton","edge","color","aria-label","Typography","variant","toUpperCase","Button","App","exact","path","component","Boolean","window","hostname","INITIAL_STATE","commentReducer","action","rootReducer","combineReducers","middlewares","thunk","store","createStore","applyMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7437c52f.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom'\n\nimport './Home.styles.scss';\n\nconst Home = (props) => {\n    return (\n      <div className=\"homePageDiv\">\n        <div className=\"homePageBody\">\n          <h2>Choose the Topic</h2>\n          <p>You want to talk about</p>\n          <ul>\n            <li\n              onClick={() =>\n                props.history.push(\"/redux-exercise/chat/greeting\")\n              }\n            >\n              Greeting\n            </li>\n            <li>\n              <Link to=\"/redux-exercise/chat/food\">Food</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Movie</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Programming</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Outdoor Activity</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Travering</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Romance</Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n}\n\nexport default Home;","export const commentActionTypes = {\n  COMMENTLIST_SETUP: \"COMMENTLIST_SETUP\",\n  ADD_NEWCOMMENT: \"ADD_NEWCOMMENT\",\n};\n\nexport const commentListSetUp = (comments) => ({\n  type: commentActionTypes.COMMENTLIST_SETUP,\n  payload: comments\n});\n\nexport const addNewComment = (comment) => ({\n  type: commentActionTypes.ADD_NEWCOMMENT,\n  payload: comment\n});","import firebase from \"firebase/app\";\n\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\napiKey: \"AIzaSyCIWtOYcNVbkFSc5zeTl1OD5ipu2NPmwiM\",\nauthDomain: \"chat-app-8976e.firebaseapp.com\",\ndatabaseURL: \"https://chat-app-8976e.firebaseio.com\",\nprojectId: \"chat-app-8976e\",\nstorageBucket: \"chat-app-8976e.appspot.com\",\nmessagingSenderId: \"622522794289\",\nappId: \"1:622522794289:web:a089a4b8f033367ac67010\",\nmeasurementId: \"G-Y5ZTFZ215Q\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);","import { createSelector } from 'reselect';\n\nconst commentsSelector = (state) => state.comments;\n\nexport const getCommentList = createSelector(\n    [commentsSelector],\n    state => state.commentList\n)","import React from 'react';\n\nconst CommentListItem = (props) => {\n    const comment = props.comment;\n\n    return (\n      <li>\n        <p className=\"commentData\">\n          <span className=\"commentNo\">No.{comment.commentNo}</span>\n          <span className=\"commentName\">{comment.userName}</span>\n          <span className=\"commentDate\">{comment.date}</span>\n          <span className=\"commentTime\">{comment.time}</span>\n        </p>\n        <div className=\"commentMessage\">\n          <p>{comment.message}</p>\n        </div>\n      </li>\n    );\n}\n\nexport default CommentListItem;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { commentsInitiate } from '../../redux/comment/comment.operations.js';\nimport { getCommentList } from '../../redux/comment/comment.selector.js';\n\nimport CommentListItem from '../CommentListItem/CommentListItem.component';\n\nimport './CommentList.styles.scss';\n\nconst CommentList = (props) => {\n    const topic = props.topic;\n\n    const dispatch = useDispatch();\n    const state = useSelector((state) => state);\n    let commentList = getCommentList(state);\n\n    useEffect(() => {\n      dispatch(commentsInitiate(\"chat-\" + topic));\n      // console.log(topic)\n      // dispatch(commentsInitiate(\"chat-greeting\"));\n    //   console.log(commentList);\n    },[]);\n\n    useEffect(()=>{\n        const obj = document.querySelector(\".commentListWrapper\");\n        obj.scrollTop = obj.scrollHeight;\n        console.log(commentList);\n    }, [commentList])\n\n    return (\n      <div className=\"commentListWrapper\">\n        <ul className=\"commentList\">{\n            commentList.map(comment => \n                <CommentListItem key={comment.commentNo} comment={comment} />\n            )\n        }</ul>\n      </div>\n    );\n}\n\nexport default CommentList;","import { commentListSetUp, addNewComment } from './comment.actions';\n\nimport { firestore } from '../../firebase/firebase'\n\nexport const commentsInitiate = (collectionId) => {\n    return async (dispatch, getState) => {\n      const collectionRef = firestore.collection(collectionId);\n      let comments = [];\n\n      await collectionRef\n        .orderBy(\"commentNo\")\n        .get()\n        .then((snapshot) => {\n          snapshot.forEach((doc) => {\n            const comment = doc.data();\n            //   console.log(comment);\n            comments.push(comment);\n          });\n        });\n\n    //   console.log(comments);\n      dispatch(commentListSetUp(comments));\n    }\n}\n\nexport const addCommentToDatabase = (collectionId, comment) => {\n    return async (dispatch, getState) => {\n      const collectionRef = firestore.collection(collectionId);\n\n      await collectionRef.add(comment)\n\n      dispatch(addNewComment(comment));\n    }\n}","import React, {useState, useEffect} from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCommentToDatabase } from '../../redux/comment/comment.operations.js';\n\nimport './inputArea.styles.scss';\n\nconst InputArea = (props) => {\n    const dispatch = useDispatch();\n    const comments = useSelector(state => state.comments);\n    let newCommentNo = comments.commentList.length + 1;\n\n    const topic = props.topic;\n    \n    if (newCommentNo < 10) {\n      newCommentNo = \"000\" + newCommentNo;\n    } else if (newCommentNo < 100) {\n      newCommentNo = \"00\" + newCommentNo;\n    } else if (newCommentNo < 1000) {\n      newCommentNo = \"0\" + newCommentNo;\n    } \n    \n    const [userName, setUserName] = useState(\"No Name\");\n    const [message, setMessage] = useState(\"\");\n    const [commentNo, setCommentNo] = useState(newCommentNo);\n\n    const nameChangeHandler = (event) => {\n        setUserName(event.target.value)\n    }\n    const messageChangeHandler = (event) => {\n        setMessage(event.target.value)\n    }\n    const submitComment = (event) => {\n      event.preventDefault();\n\n      // if (message === \"\") {\n      //     alert(\"Message Area is required!!!\")\n      //     return;\n      // }\n\n      let sendMessage = message;\n      let sendUserName = userName;\n\n      if (sendMessage === \"\") {\n        sendMessage = \"No Message\";\n      }\n      if (sendUserName === \"\") {\n        sendUserName = \"No Name\";\n      }\n\n      const month = new Date().getMonth() + 1;\n      const day = new Date().getDate();\n      const year = new Date().getFullYear();\n\n      const date = month + \"/\" + day + \"/\" + year;\n\n      const hours = new Date().getHours();\n      const mins = new Date().getMinutes() < 10\n              ? \"0\" + new Date().getMinutes()\n              : new Date().getMinutes()\n      \n      const time = hours + \":\" + mins\n\n      dispatch(\n        addCommentToDatabase(\n            \"chat-\" + topic,\n            {\n            commentNo: commentNo,\n            date: date,\n            time: time,\n            userName: sendUserName,\n            message: sendMessage,\n            }\n        )\n      );\n      // setUserName(\"No Name\");\n      setMessage(\"\");\n    };\n\n    useEffect(()=>{\n        setCommentNo(newCommentNo);\n    },[comments])\n\n    return (\n      <div className=\"inputAreaDiv\">\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Your Name\"\n            // value={userName}\n            onChange={nameChangeHandler}\n          />\n          <textarea\n            placeholder=\"Write message\"\n            onChange={messageChangeHandler}\n            value={message}\n            required\n          />\n          <button type=\"submit\" onClick={submitComment}>\n            SUBMIT\n          </button>\n        </form>\n      </div>\n    );\n}\n\nexport default InputArea;","import React from \"react\";\n\nimport \"./Chat.styles.scss\";\n\nimport CommentList from \"../../components/CommentList/CommentList.component.jsx\";\nimport InputArea from \"../../components/InputArea/InputArea.component.jsx\";\n\nconst Chat = (props) => {\n    const topic = props.match.params.topic;\n    // console.log(topic);\n    \n    return (\n      <div className=\"Chat\">\n        <div className=\"pageStyle\">\n          <CommentList topic={topic} />\n          <InputArea topic={topic} />\n        </div>\n      </div>\n    );\n}\n\nexport default Chat;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCommentList } from \"../../redux/comment/comment.selector.js\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"fixed\",\n    width: \"100%\",\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n    const [headerText, setheaderText] = useState(\"Chat Place\");\n\n    const classes = useStyles();\n    const state = useSelector(state => state);\n    let commentList = getCommentList(state);\n\n    let history = useHistory();\n\n    useEffect(() => {\n      return history.listen((location) => {\n        let topic = location.pathname;\n\n        if (topic === \"/\" || topic === \"\") {\n          topic = \"Chat Place\";\n        } else {\n          topic = topic.slice(topic.lastIndexOf(\"/\") + 1);\n        }\n        console.log(topic);\n        setheaderText(topic);\n      });\n    }, [history]);\n\n    useEffect(() => {\n      return history.listen((location) => {\n        let topic = location.pathname;\n\n        if (topic === \"/\" || topic === \"\") {\n          topic = \"Chat Place\";\n        } else {\n          topic = topic.slice(topic.lastIndexOf(\"/\") + 1);\n        }\n        console.log(topic);\n        setheaderText(topic);\n      });\n    }, [commentList]);\n\n    // useEffect(() => {\n    //   let topic = history.location.pathname;\n\n    //   if (topic === \"/\" || topic === \"\") {\n    //     topic = \"Chat Place\";\n    //   } else {\n    //     topic = topic.slice(topic.lastIndexOf(\"/\") + 1);\n    //   }\n    //   console.log(topic);\n    //   setheaderText(topic);\n    // })\n    \n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ background: \"#100c08\" }}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            {headerText.toUpperCase()}\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\n\nimport Home from './pages/Home/Home.page.jsx';\nimport Chat from './pages/Chat/Chat.page.jsx'\n\nimport { Route, Switch } from \"react-router-dom\";\n\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar.component.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ButtonAppBar />\n      <Switch>\n        <Route exact path=\"/redux-exercise\" component={Home} />\n        <Route path=\"/redux-exercise/chat/:topic\" component={Chat} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n      // <ButtonAppBar />\n      // <div className=\"pageStyle\">\n      //   <CommentList />\n      //   <InputArea />\n      // </div>\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { commentActionTypes } from \"./comment.actions\";\n\nconst INITIAL_STATE = {\n  commentList: [\n    {\n      commentNo: \"0000\",\n      userName: \"TOMO\",\n      date: \"09/22/2020\",\n      time: \"00:00\",\n      message: [\n        // `Welcome to \"Chatting Place\"!!`,\n        // `Hi, I'm Tomo, I developed this chat app!!`,\n      ],\n    },\n    // {\n    //   commentNo: \"0001\",\n    //   userName: \"TOMO\",\n    //   dateAndTime: new Date(),\n    //   message: [\n    //     `Welcome to \"Chatting Place\"!!`,\n    //     `Hi, I'm Tomo, I developed this chat app!!`,\n    //   ],\n    // },\n    // {\n    //   commentNo: \"0002\",\n    //   userName: \"TOMO\",\n    //   dateAndTime: new Date(),\n    //   message: [\n    //     `Please leave your first comment!!`,\n    //   ],\n    // },\n  ],\n};\n\nconst commentReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case commentActionTypes.COMMENTLIST_SETUP:\n        return {\n          ...state,\n          commentList: action.payload,\n        };\n      case commentActionTypes.ADD_NEWCOMMENT:\n        return {\n          ...state,\n          commentList: [...state.commentList, action.payload],\n        };\n      default:\n        return state;\n    }\n}\n\nexport default commentReducer;","import { combineReducers } from 'redux';\n\nimport commentReducer from './comment/comment.reducer';\n\n\nexport const rootReducer = combineReducers({\n    comments: commentReducer\n});\n\n// export default rootReducer;","import { createStore, applyMiddleware } from 'redux';\n\nimport { rootReducer } from './root-reducer';\n\n// import logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [thunk];\n\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}