{"version":3,"sources":["components/ButtonAppBar/ButtonAppBar.component.jsx","redux/comment/comment.actions.js","components/CommentListItem/CommentListItem.component.jsx","components/CommentList/CommentList.component.jsx","components/InputArea/InputArea.component.jsx","App.js","serviceWorker.js","redux/comment/comment.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","position","width","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","commentActionTypes","CommentListItem","props","comment","commentNo","userName","dateAndTime","getDate","getMonth","getFullYear","getHours","getMinutes","message","map","p","key","CommentList","comments","useSelector","state","dispatch","useDispatch","commentList","useEffect","type","obj","document","querySelector","scrollTop","scrollHeight","InputArea","newCommentNo","length","useState","setUserName","setMessage","setCommentNo","placeholder","onChange","event","target","value","required","onClick","preventDefault","sendMessage","sendUserName","Date","payload","App","Boolean","window","location","hostname","match","INITIAL_STATE","commentReducer","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e867a744.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"fixed\",\n    width: \"100%\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Discussion Thread\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","export const commentActionTypes = {\n    COMMENTLIST_SETUP: \"COMMENTLIST_SETUP\",\n    ADD_NEWCOMMENT: \"ADD_NEWCOMMENT\"\n};\n\nexport const commentListSetUp = () => ({\n  type: commentActionTypes.COMMENTLIST_SETUP,\n  // payload: comments\n});\n\nexport const addNewComment = (comment) => ({\n  type: commentActionTypes.ADD_NEWCOMMENT,\n  payload: comment\n});","import React from 'react';\n\nconst CommentListItem = (props) => {\n    const comment = props.comment;\n\n    return (\n      <li>\n        <p className=\"commentData\">\n          <span className=\"commentNo\">No.{comment.commentNo}</span>\n          <span className=\"commentName\">{comment.userName}</span>\n          <span className=\"commentDate\">\n            {comment.dateAndTime.getDate()}/\n            {comment.dateAndTime.getMonth() + 1}/\n            {comment.dateAndTime.getFullYear()}\n          </span>\n          <span className=\"commentTime\">\n            {comment.dateAndTime.getHours()}:\n            {comment.dateAndTime.getMinutes() < 10\n              ? \"0\" + comment.dateAndTime.getMinutes()\n              : comment.dateAndTime.getMinutes()}\n          </span>\n        </p>\n        <div className=\"commentMessage\">\n          {comment.message.map((p) => (\n            <p key={p}>{p}</p>\n          ))}\n        </div>\n      </li>\n    );\n}\n\nexport default CommentListItem;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { commentListSetUp } from '../../redux/comment/comment.actions.js';\n\nimport CommentListItem from '../CommentListItem/CommentListItem.component';\n\nimport './CommentList.styles.scss';\n\nconst CommentList = () => {\n    const comments = useSelector((state) => state.comments);\n    const dispatch = useDispatch();\n    let commentList = comments.commentList;\n\n    useEffect(() => {\n      dispatch(commentListSetUp());\n    //   console.log(commentList);\n    },[]);\n\n    useEffect(()=>{\n        const obj = document.querySelector(\".commentListWrapper\");\n        obj.scrollTop = obj.scrollHeight;\n    }, [comments])\n\n    return (\n      <div className=\"commentListWrapper\">\n        <ul className=\"commentList\">{\n            commentList.map(comment => \n                <CommentListItem key={comment.commentNo} comment={comment} />\n            )\n        }</ul>\n      </div>\n    );\n}\n\nexport default CommentList;\n\n            // <li>\n            //   <p className=\"commentData\">\n            //     <span className=\"commentNo\">No.{commentList[0].commentNo}</span>\n            //     <span className=\"commentName\">{commentList[0].userName}</span>\n            //     <span className=\"commentDate\">\n            //       {commentList[0].dateAndTime.getDate()}/\n            //       {commentList[0].dateAndTime.getMonth() + 1}/\n            //       {commentList[0].dateAndTime.getFullYear()}\n            //     </span>\n            //     <span className=\"commentTime\">\n            //       {commentList[0].dateAndTime.getHours()}:\n            //       {commentList[0].dateAndTime.getMinutes() < 10\n            //         ? \"0\" + commentList[0].dateAndTime.getMinutes()\n            //         : commentList[0].dateAndTime.getMinutes()}\n            //     </span>\n            //   </p>\n            //   <div className=\"commentMessage\">\n            //     {commentList[0].message.map((p) => (\n            //       <p key={p}>{p}</p>\n            //     ))}\n            //   </div>\n            // </li>;\n","import React, {useState, useEffect} from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNewComment } from '../../redux/comment/comment.actions'\n\nimport './inputArea.styles.scss';\n\nconst InputArea = () => {\n    const dispatch = useDispatch();\n    const comments = useSelector(state => state.comments);\n    let newCommentNo = comments.commentList.length + 1;\n    \n    if (newCommentNo < 10) {\n      newCommentNo = \"000\" + newCommentNo;\n    } else if (newCommentNo < 100) {\n      newCommentNo = \"00\" + newCommentNo;\n    } else if (newCommentNo < 1000) {\n      newCommentNo = \"0\" + newCommentNo;\n    } \n    \n    const [userName, setUserName] = useState(\"No Name\");\n    const [message, setMessage] = useState(\"\");\n    // const [dateAndTime, setDateAndTime] = useState(null);\n    const [commentNo, setCommentNo] = useState(newCommentNo);\n\n    const nameChangeHandler = (event) => {\n        setUserName(event.target.value)\n    }\n    const messageChangeHandler = (event) => {\n        setMessage(event.target.value)\n    }\n    const submitComment = (event) => {\n        event.preventDefault();\n\n        // if (message === \"\") {\n        //     alert(\"Message Area is required!!!\")\n        //     return;\n        // }\n\n        let sendMessage = message;\n        let sendUserName = userName;\n\n        if (sendMessage === \"\") {\n            sendMessage = \"No Message\"\n        }\n        if (sendUserName === \"\") {\n            sendUserName = \"No Name\"\n        }\n\n          dispatch(\n            addNewComment({\n              commentNo: commentNo,\n              dateAndTime: new Date(),\n              userName: sendUserName,\n              message: [sendMessage],\n            })\n          );\n        // setUserName(\"No Name\");\n        setMessage(\"\");\n    }\n\n    useEffect(()=>{\n        setCommentNo(newCommentNo);\n    },[comments])\n\n    // useEffect(()=> {\n        // console.log(userName);\n        // console.log(message);\n        // console.log(comments);\n    // })\n\n    return (\n      <div className=\"inputAreaDiv\">\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Your Name\"\n            // value={userName}\n            onChange={nameChangeHandler}\n          />\n          <textarea\n            placeholder=\"Write message\"\n            onChange={messageChangeHandler}\n            value={message}\n            required\n          />\n          <button type=\"submit\" onClick={submitComment}>\n            SUBMIT\n          </button>\n        </form>\n      </div>\n    );\n}\n\nexport default InputArea;","import React from 'react';\nimport './App.css';\n\nimport ButtonAppBar from './components/ButtonAppBar/ButtonAppBar.component.jsx';\nimport CommentList from './components/CommentList/CommentList.component.jsx';\nimport InputArea from './components/InputArea/InputArea.component.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ButtonAppBar />\n      <div className=\"pageStyle\">\n        <CommentList />\n        <InputArea />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { commentActionTypes } from \"./comment.actions\";\n\nconst INITIAL_STATE = {\n  commentList: [\n    {\n      commentNo: \"0001\",\n      userName: \"TOMO\",\n      dateAndTime: new Date(),\n      message: [`Welcome to \"Discussion Thread\"!!`,`Let's post your first comment!!!`],\n    }\n  ],\n};\n\nconst commentReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case commentActionTypes.COMMENTLIST_SETUP:\n        return {\n          ...state,\n        };\n    case commentActionTypes.ADD_NEWCOMMENT:\n        return {\n            ...state,\n            commentList: [...state.commentList, action.payload]\n        };\n      default:\n        return state;\n    }\n}\n\nexport default commentReducer;","import { combineReducers } from 'redux';\n\nimport commentReducer from './comment/comment.reducer';\n\nconst rootReducer = combineReducers({\n    comments: commentReducer\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\n\nimport rootReducer from './root-reducer';\n\nconst store = createStore(rootReducer);\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}